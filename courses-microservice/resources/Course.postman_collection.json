{
	"info": {
		"_postman_id": "e93310e5-f9c3-416b-89f6-d43ce799f87d",
		"name": "Course",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29129268"
	},
	"item": [
		{
			"name": "Create",
			"item": [
				{
					"name": "Create Course - Invalid Hours",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 for invalid hours\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response should be in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response body should contain error for invalid hours\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).to.eql(\"One or more validation errors occurred.\");",
									"    pm.expect(jsonData.errors[\"Course.Hours\"]).to.eql([\"Hours must be a positive integer.\"]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Anime II\",\n  \"credits\": 3,\n  \"hours\": 0, // Valor inválido\n  \"active\": true,\n  \"semester\": \"B\",\n  \"schoolId\": \"321\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8003/api/v1/courses",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8003",
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Course - Invalid Credits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 for invalid credits\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response should be in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response body should contain error for invalid credits\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).to.eql(\"One or more validation errors occurred.\");",
									"    pm.expect(jsonData.errors[\"Course.Credits\"]).to.eql([\"Credits must be a positive integer.\"]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Anime II\",\n  \"credits\": 0, // Valor inválido\n  \"hours\": 5,\n  \"active\": true,\n  \"semester\": \"B\",\n  \"schoolId\": \"321\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8003/api/v1/courses",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8003",
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Course - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response should be in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response body should contain course data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"courseId\");",
									"    pm.expect(jsonData.name).to.eql(\"Anime II\");",
									"    pm.expect(jsonData.credits).to.eql(4);",
									"    pm.expect(jsonData.hours).to.eql(3);",
									"    pm.expect(jsonData.active).to.eql(true);",
									"    pm.expect(jsonData.semester).to.eql('A');",
									"    pm.expect(jsonData.schoolId).to.eql(\"123\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Anime II\",\n  \"credits\": 4,\n  \"hours\": 3,\n  \"active\": true,\n  \"semester\": \"A\",\n  \"schoolId\": \"123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8003/api/v1/courses",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8003",
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetById",
			"item": [
				{
					"name": "GetById - Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Definir la URL del endpoint de creación de curso",
									"const createCourseUrl = 'http://localhost:8003/api/v1/courses';",
									"",
									"// Datos para el nuevo curso",
									"const newCourseData = {",
									"  \"name\": \"Test course\",",
									"  \"credits\": 4,",
									"  \"hours\": 3,",
									"  \"active\": true,",
									"  \"semester\": \"A\",",
									"  \"schoolId\": \"123\"",
									"}",
									"",
									"// Realizar la solicitud POST para crear el curso",
									"pm.sendRequest({",
									"    url: createCourseUrl,",
									"    method: 'POST',",
									"    header: 'Content-Type: application/json',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(newCourseData)",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.log('Error creating course:', err);",
									"    } else {",
									"        const jsonResponse = res.json();",
									"        // Verificar que se ha creado el curso y guardar el ID en una variable de entorno",
									"        if (jsonResponse && jsonResponse.courseId) {",
									"            console.log(jsonResponse.courseId)",
									"            pm.environment.set('courseId', jsonResponse.courseId);",
									"        } else {",
									"            console.log('No courseId found in the response.');",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response should be in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response body should contain course data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"courseId\");",
									"    pm.expect(jsonData.name).to.eql(\"Test course\");",
									"    pm.expect(jsonData.credits).to.eql(4);",
									"    pm.expect(jsonData.hours).to.eql(3);",
									"    pm.expect(jsonData.active).to.eql(true);",
									"    pm.expect(jsonData.semester).to.eql('A');",
									"    pm.expect(jsonData.schoolId).to.eql(\"123\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8003/api/v1/courses/{{courseId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8003",
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetById - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response should be in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response should contain error details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", 404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8003/api/v1/courses/374650ac-962a-4f73-982d-57221d6c7539",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8003",
							"path": [
								"api",
								"v1",
								"courses",
								"374650ac-962a-4f73-982d-57221d6c7539"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetById - Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response should be in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response should contain error details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", 400);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8003/api/v1/courses/374650ac-962a-4f73-982d-a",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8003",
							"path": [
								"api",
								"v1",
								"courses",
								"374650ac-962a-4f73-982d-a"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAll",
			"item": [
				{
					"name": "GetAll - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response should be in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response should contain a list of courses\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array'); // Verifica que la respuesta sea una lista",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property(\"courseId\");",
									"        pm.expect(jsonData[0]).to.have.property(\"name\");",
									"        pm.expect(jsonData[0]).to.have.property(\"credits\");",
									"        pm.expect(jsonData[0]).to.have.property(\"hours\");",
									"        pm.expect(jsonData[0]).to.have.property(\"active\");",
									"        pm.expect(jsonData[0]).to.have.property(\"semester\");",
									"        pm.expect(jsonData[0]).to.have.property(\"schoolId\");",
									"    }",
									"});",
									"",
									"pm.test(\"Response list should not be empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.greaterThan(0); // Asegúrate de que la lista no esté vacía",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8003/api/v1/courses",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8003",
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "Delete - Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Definir la URL del endpoint de creación de curso",
									"const createCourseUrl = 'http://localhost:8003/api/v1/courses';",
									"",
									"// Datos para el nuevo curso",
									"const newCourseData = {",
									"  \"name\": \"Test course\",",
									"  \"credits\": 4,",
									"  \"hours\": 3,",
									"  \"active\": true,",
									"  \"semester\": \"A\",",
									"  \"schoolId\": \"123\"",
									"}",
									"",
									"// Realizar la solicitud POST para crear el curso",
									"pm.sendRequest({",
									"    url: createCourseUrl,",
									"    method: 'POST',",
									"    header: 'Content-Type: application/json',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(newCourseData)",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.log('Error creating course:', err);",
									"    } else {",
									"        const jsonResponse = res.json();",
									"        // Verificar que se ha creado el curso y guardar el ID en una variable de entorno",
									"        if (jsonResponse && jsonResponse.courseId) {",
									"            console.log(jsonResponse.courseId)",
									"            pm.environment.set('courseId', jsonResponse.courseId);",
									"        } else {",
									"            console.log('No courseId found in the response.');",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204); // Verifica que el estado sea 204 No Content",
									"});",
									"",
									"// Verificar que el curso ha sido eliminado (opcional, si deseas hacer una verificación adicional)",
									"pm.sendRequest({",
									"    url: 'http://localhost:8003/api/v1/courses/' + pm.environment.get('courseId'),",
									"    method: 'GET'",
									"}, function (err, res) {",
									"    pm.test(\"Course should not exist\", function () {",
									"        pm.expect(res).to.have.status(404); // Verifica que el curso ya no exista",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8003/api/v1/courses/{{courseId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8003",
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response should be in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response should contain error details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", 404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8003/api/v1/courses/374650ac-962a-4f73-982d-57221d6c7539",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8003",
							"path": [
								"api",
								"v1",
								"courses",
								"374650ac-962a-4f73-982d-57221d6c7539"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update",
			"item": [
				{
					"name": "Update - Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Definir la URL del endpoint de creación de curso",
									"const createCourseUrl = 'http://localhost:8003/api/v1/courses';",
									"",
									"// Datos para el nuevo curso",
									"const newCourseData = {",
									"  \"name\": \"Test course\",",
									"  \"credits\": 4,",
									"  \"hours\": 3,",
									"  \"active\": true,",
									"  \"semester\": \"A\",",
									"  \"schoolId\": \"123\"",
									"}",
									"",
									"// Realizar la solicitud POST para crear el curso",
									"pm.sendRequest({",
									"    url: createCourseUrl,",
									"    method: 'POST',",
									"    header: 'Content-Type: application/json',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(newCourseData)",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.log('Error creating course:', err);",
									"    } else {",
									"        const jsonResponse = res.json();",
									"        // Verificar que se ha creado el curso y guardar el ID en una variable de entorno",
									"        if (jsonResponse && jsonResponse.courseId) {",
									"            console.log(jsonResponse.courseId)",
									"            pm.environment.set('courseId', jsonResponse.courseId);",
									"        } else {",
									"            console.log('No courseId found in the response.');",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204); // Verifica que el estado sea 204 No Content",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"id\": \"{{courseId}}\",\n  \"name\": \"asd\",\n  \"credits\": 2,\n  \"hours\": 3,\n  \"active\": true,\n  \"semester\": \"A\",\n  \"schoolId\": \"21\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8003/api/v1/courses/{{courseId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8003",
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response should contain error details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", 404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"asd\",\n  \"credits\": 2,\n  \"hours\": 3,\n  \"active\": true,\n  \"semester\": \"A\",\n  \"schoolId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8003/api/v1/courses/3fa85f64-5717-4562-b3fc-2c963f66afa6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8003",
							"path": [
								"api",
								"v1",
								"courses",
								"3fa85f64-5717-4562-b3fc-2c963f66afa6"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}